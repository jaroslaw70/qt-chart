import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtCommercial.Chart 1.4'

Module {
    Component {
        name: "QGraphicsObject"
        defaultProperty: "children"
        prototype: "QObject"
        Property { name: "parent"; type: "QGraphicsObject"; isPointer: true }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "pos"; type: "QPointF" }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOriginPoint"; type: "QPointF" }
        Property { name: "effect"; type: "QGraphicsEffect"; isPointer: true }
        Property {
            name: "children"
            type: "QDeclarativeListProperty<QGraphicsObject>"
            isReadonly: true
        }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
    }
    Component {
        name: "QGraphicsWidget"
        defaultProperty: "children"
        prototype: "QGraphicsObject"
        Property { name: "palette"; type: "QPalette" }
        Property { name: "font"; type: "QFont" }
        Property { name: "layoutDirection"; type: "Qt::LayoutDirection" }
        Property { name: "size"; type: "QSizeF" }
        Property { name: "minimumSize"; type: "QSizeF" }
        Property { name: "preferredSize"; type: "QSizeF" }
        Property { name: "maximumSize"; type: "QSizeF" }
        Property { name: "sizePolicy"; type: "QSizePolicy" }
        Property { name: "focusPolicy"; type: "Qt::FocusPolicy" }
        Property { name: "windowFlags"; type: "Qt::WindowFlags" }
        Property { name: "windowTitle"; type: "string" }
        Property { name: "geometry"; type: "QRectF" }
        Property { name: "autoFillBackground"; type: "bool" }
        Property { name: "layout"; type: "QGraphicsLayout"; isPointer: true }
        Method { name: "close"; type: "bool" }
    }
    Component {
        name: "QtCommercialChart::DeclarativeAreaSeries"
        prototype: "QtCommercialChart::QAreaSeries"
        exports: [
            "QtCommercial.Chart/AreaSeries 1.0",
            "QtCommercial.Chart/AreaSeries 1.1",
            "QtCommercial.Chart/AreaSeries 1.2",
            "QtCommercial.Chart/AreaSeries 1.3",
            "QtCommercial.Chart/AreaSeries 1.4"
        ]
        exportMetaObjectRevisions: [0, 1, 2, 3, 4]
        Property { name: "upperSeries"; type: "DeclarativeLineSeries"; isPointer: true }
        Property { name: "lowerSeries"; type: "DeclarativeLineSeries"; isPointer: true }
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisAngular"; revision: 3; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisRadial"; revision: 3; type: "QAbstractAxis"; isPointer: true }
        Property { name: "borderWidth"; revision: 1; type: "double" }
        Property { name: "brushFilename"; revision: 4; type: "string" }
        Property { name: "brush"; revision: 4; type: "QBrush" }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "borderWidthChanged"
            revision: 1
            Parameter { name: "width"; type: "double" }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisAngularChanged"
            revision: 3
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisRadialChanged"
            revision: 3
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal { name: "brushChanged"; revision: 4 }
        Signal {
            name: "brushFilenameChanged"
            revision: 4
            Parameter { name: "brushFilename"; type: "string" }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativeAxes"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/DeclarativeAxes 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "axisX"; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; type: "QAbstractAxis"; isPointer: true }
        Signal {
            name: "axisXChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativeBarSeries"
        defaultProperty: "seriesChildren"
        prototype: "QtCommercialChart::QBarSeries"
        exports: [
            "QtCommercial.Chart/BarSeries 1.0",
            "QtCommercial.Chart/BarSeries 1.1",
            "QtCommercial.Chart/BarSeries 1.2"
        ]
        exportMetaObjectRevisions: [0, 1, 2]
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "seriesChildren"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Method {
            name: "appendSeriesChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "at"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            type: "DeclarativeBarSet*"
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "insert"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Method { name: "clear" }
    }
    Component {
        name: "QtCommercialChart::DeclarativeBarSet"
        prototype: "QtCommercialChart::QBarSet"
        exports: [
            "QtCommercial.Chart/BarSet 1.0",
            "QtCommercial.Chart/BarSet 1.1",
            "QtCommercial.Chart/BarSet 1.4"
        ]
        exportMetaObjectRevisions: [0, 0, 2]
        Property { name: "values"; type: "QVariantList" }
        Property { name: "borderWidth"; revision: 1; type: "double" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "brushFilename"; revision: 2; type: "string" }
        Signal {
            name: "countChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "borderWidthChanged"
            revision: 1
            Parameter { name: "width"; type: "double" }
        }
        Signal {
            name: "brushFilenameChanged"
            revision: 2
            Parameter { name: "brushFilename"; type: "string" }
        }
        Method {
            name: "append"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "remove"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "remove"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "replace"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "at"
            type: "double"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativeBoxPlotSeries"
        defaultProperty: "seriesChildren"
        prototype: "QtCommercialChart::QBoxPlotSeries"
        exports: [
            "QtCommercial.Chart/BoxPlotSeries 1.3",
            "QtCommercial.Chart/BoxPlotSeries 1.4"
        ]
        exportMetaObjectRevisions: [0, 1]
        Property { name: "axisX"; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; type: "QAbstractAxis"; isPointer: true }
        Property { name: "seriesChildren"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "brushFilename"; revision: 1; type: "string" }
        Signal {
            name: "axisXChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "clicked"
            Parameter { name: "boxset"; type: "DeclarativeBoxSet"; isPointer: true }
        }
        Signal {
            name: "hovered"
            Parameter { name: "status"; type: "bool" }
            Parameter { name: "boxset"; type: "DeclarativeBoxSet"; isPointer: true }
        }
        Signal {
            name: "brushFilenameChanged"
            revision: 1
            Parameter { name: "brushFilename"; type: "string" }
        }
        Method {
            name: "appendSeriesChildren"
            Parameter { name: "list"; type: "QDECLARATIVE_LIST_PROPERTY<QObject>"; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "onHovered"
            Parameter { name: "status"; type: "bool" }
            Parameter { name: "boxset"; type: "QBoxSet"; isPointer: true }
        }
        Method {
            name: "onClicked"
            Parameter { name: "boxset"; type: "QBoxSet"; isPointer: true }
        }
        Method {
            name: "at"
            type: "DeclarativeBoxSet*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            type: "DeclarativeBoxSet*"
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "append"
            Parameter { name: "box"; type: "DeclarativeBoxSet"; isPointer: true }
        }
        Method {
            name: "insert"
            type: "DeclarativeBoxSet*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "box"; type: "DeclarativeBoxSet"; isPointer: true }
        }
        Method { name: "clear" }
    }
    Component {
        name: "QtCommercialChart::DeclarativeBoxSet"
        prototype: "QtCommercialChart::QBoxSet"
        exports: [
            "QtCommercial.Chart/BoxSet 1.3",
            "QtCommercial.Chart/BoxSet 1.4"
        ]
        exportMetaObjectRevisions: [0, 1]
        Enum {
            name: "ValuePositions"
            values: {
                "LowerExtreme": 0,
                "LowerQuartile": 1,
                "Median": 2,
                "UpperQuartile": 3,
                "UpperExtreme": 4
            }
        }
        Property { name: "values"; type: "QVariantList" }
        Property { name: "label"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "brushFilename"; revision: 1; type: "string" }
        Signal { name: "changedValues" }
        Signal {
            name: "changedValue"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "brushFilenameChanged"
            revision: 1
            Parameter { name: "brushFilename"; type: "string" }
        }
        Method {
            name: "append"
            Parameter { name: "value"; type: "double" }
        }
        Method { name: "clear" }
        Method {
            name: "at"
            type: "double"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setValue"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativeCategoryAxis"
        defaultProperty: "axisChildren"
        prototype: "QtCommercialChart::QCategoryAxis"
        exports: ["QtCommercial.Chart/CategoryAxis 1.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "axisChildren"; type: "QObject"; isList: true; isReadonly: true }
        Method {
            name: "append"
            Parameter { name: "label"; type: "string" }
            Parameter { name: "categoryEndValue"; type: "double" }
        }
        Method {
            name: "remove"
            Parameter { name: "label"; type: "string" }
        }
        Method {
            name: "replace"
            Parameter { name: "oldLabel"; type: "string" }
            Parameter { name: "newLabel"; type: "string" }
        }
        Method {
            name: "appendAxisChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativeCategoryRange"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/CategoryRange 1.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "endValue"; type: "double" }
        Property { name: "label"; type: "string" }
    }
    Component {
        name: "QtCommercialChart::DeclarativeChart"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: [
            "QtCommercial.Chart/ChartView 1.0",
            "QtCommercial.Chart/ChartView 1.1",
            "QtCommercial.Chart/ChartView 1.2",
            "QtCommercial.Chart/ChartView 1.3"
        ]
        exportMetaObjectRevisions: [0, 1, 2, 3]
        Enum {
            name: "Theme"
            values: {
                "ChartThemeLight": 0,
                "ChartThemeBlueCerulean": 1,
                "ChartThemeDark": 2,
                "ChartThemeBrownSand": 3,
                "ChartThemeBlueNcs": 4,
                "ChartThemeHighContrast": 5,
                "ChartThemeBlueIcy": 6,
                "ChartThemeQt": 7
            }
        }
        Enum {
            name: "Animation"
            values: {
                "NoAnimation": 0,
                "GridAxisAnimations": 1,
                "SeriesAnimations": 2,
                "AllAnimations": 3
            }
        }
        Enum {
            name: "SeriesType"
            values: {
                "SeriesTypeLine": 0,
                "SeriesTypeArea": 1,
                "SeriesTypeBar": 2,
                "SeriesTypeStackedBar": 3,
                "SeriesTypePercentBar": 4,
                "SeriesTypeBoxPlot": 5,
                "SeriesTypePie": 6,
                "SeriesTypeScatter": 7,
                "SeriesTypeSpline": 8,
                "SeriesTypeHorizontalBar": 9,
                "SeriesTypeHorizontalStackedBar": 10,
                "SeriesTypeHorizontalPercentBar": 11
            }
        }
        Property { name: "theme"; type: "Theme" }
        Property { name: "animationOptions"; type: "Animation" }
        Property { name: "title"; type: "string" }
        Property { name: "titleFont"; type: "QFont" }
        Property { name: "titleColor"; type: "QColor" }
        Property { name: "legend"; type: "QLegend"; isReadonly: true; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "dropShadowEnabled"; type: "bool" }
        Property { name: "backgroundRoundness"; revision: 3; type: "double" }
        Property { name: "topMargin"; type: "double"; isReadonly: true }
        Property { name: "bottomMargin"; type: "double"; isReadonly: true }
        Property { name: "leftMargin"; type: "double"; isReadonly: true }
        Property { name: "rightMargin"; type: "double"; isReadonly: true }
        Property {
            name: "minimumMargins"
            revision: 1
            type: "DeclarativeMargins"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "margins"
            revision: 2
            type: "DeclarativeMargins"
            isReadonly: true
            isPointer: true
        }
        Property { name: "plotArea"; revision: 1; type: "QRectF"; isReadonly: true }
        Property { name: "plotAreaColor"; revision: 3; type: "QColor" }
        Property { name: "axes"; revision: 2; type: "QAbstractAxis"; isList: true; isReadonly: true }
        Signal { name: "axisLabelsChanged" }
        Signal {
            name: "titleColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "dropShadowEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal { name: "marginsChanged"; revision: 2 }
        Signal {
            name: "plotAreaChanged"
            Parameter { name: "plotArea"; type: "QRectF" }
        }
        Signal {
            name: "seriesAdded"
            Parameter { name: "series"; type: "QAbstractSeries"; isPointer: true }
        }
        Signal {
            name: "seriesRemoved"
            Parameter { name: "series"; type: "QAbstractSeries"; isPointer: true }
        }
        Signal { name: "plotAreaColorChanged"; revision: 3 }
        Signal {
            name: "backgroundRoundnessChanged"
            revision: 3
            Parameter { name: "diameter"; type: "double" }
        }
        Method {
            name: "series"
            type: "QAbstractSeries*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "series"
            type: "QAbstractSeries*"
            Parameter { name: "seriesName"; type: "string" }
        }
        Method {
            name: "createSeries"
            type: "QAbstractSeries*"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "name"; type: "string" }
            Parameter { name: "axisX"; type: "QAbstractAxis"; isPointer: true }
            Parameter { name: "axisY"; type: "QAbstractAxis"; isPointer: true }
        }
        Method {
            name: "createSeries"
            type: "QAbstractSeries*"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "name"; type: "string" }
            Parameter { name: "axisX"; type: "QAbstractAxis"; isPointer: true }
        }
        Method {
            name: "createSeries"
            type: "QAbstractSeries*"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "createSeries"
            type: "QAbstractSeries*"
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "removeSeries"
            Parameter { name: "series"; type: "QAbstractSeries"; isPointer: true }
        }
        Method { name: "removeAllSeries" }
        Method {
            name: "setAxisX"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
            Parameter { name: "series"; type: "QAbstractSeries"; isPointer: true }
        }
        Method {
            name: "setAxisX"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Method {
            name: "setAxisY"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
            Parameter { name: "series"; type: "QAbstractSeries"; isPointer: true }
        }
        Method {
            name: "setAxisY"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Method { name: "createDefaultAxes" }
        Method {
            name: "axisX"
            type: "QAbstractAxis*"
            Parameter { name: "series"; type: "QAbstractSeries"; isPointer: true }
        }
        Method { name: "axisX"; type: "QAbstractAxis*" }
        Method {
            name: "axisY"
            type: "QAbstractAxis*"
            Parameter { name: "series"; type: "QAbstractSeries"; isPointer: true }
        }
        Method { name: "axisY"; type: "QAbstractAxis*" }
        Method {
            name: "zoom"
            Parameter { name: "factor"; type: "double" }
        }
        Method {
            name: "scrollLeft"
            Parameter { name: "pixels"; type: "double" }
        }
        Method {
            name: "scrollRight"
            Parameter { name: "pixels"; type: "double" }
        }
        Method {
            name: "scrollUp"
            Parameter { name: "pixels"; type: "double" }
        }
        Method {
            name: "scrollDown"
            Parameter { name: "pixels"; type: "double" }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativeHorizontalBarSeries"
        defaultProperty: "seriesChildren"
        prototype: "QtCommercialChart::QHorizontalBarSeries"
        exports: [
            "QtCommercial.Chart/HorizontalBarSeries 1.1",
            "QtCommercial.Chart/HorizontalBarSeries 1.2"
        ]
        exportMetaObjectRevisions: [1, 2]
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "seriesChildren"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Method {
            name: "appendSeriesChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "at"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            type: "DeclarativeBarSet*"
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "insert"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Method { name: "clear" }
    }
    Component {
        name: "QtCommercialChart::DeclarativeHorizontalPercentBarSeries"
        defaultProperty: "seriesChildren"
        prototype: "QtCommercialChart::QHorizontalPercentBarSeries"
        exports: [
            "QtCommercial.Chart/HorizontalPercentBarSeries 1.1",
            "QtCommercial.Chart/HorizontalPercentBarSeries 1.2"
        ]
        exportMetaObjectRevisions: [1, 2]
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "seriesChildren"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Method {
            name: "appendSeriesChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "at"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            type: "DeclarativeBarSet*"
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "insert"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Method { name: "clear" }
    }
    Component {
        name: "QtCommercialChart::DeclarativeHorizontalStackedBarSeries"
        defaultProperty: "seriesChildren"
        prototype: "QtCommercialChart::QHorizontalStackedBarSeries"
        exports: [
            "QtCommercial.Chart/HorizontalStackedBarSeries 1.1",
            "QtCommercial.Chart/HorizontalStackedBarSeries 1.2"
        ]
        exportMetaObjectRevisions: [1, 2]
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "seriesChildren"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Method {
            name: "appendSeriesChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "at"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            type: "DeclarativeBarSet*"
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "insert"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Method { name: "clear" }
    }
    Component {
        name: "QtCommercialChart::DeclarativeLineSeries"
        defaultProperty: "declarativeChildren"
        prototype: "QtCommercialChart::QLineSeries"
        exports: [
            "QtCommercial.Chart/LineSeries 1.0",
            "QtCommercial.Chart/LineSeries 1.1",
            "QtCommercial.Chart/LineSeries 1.2",
            "QtCommercial.Chart/LineSeries 1.3"
        ]
        exportMetaObjectRevisions: [0, 1, 2, 3]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisAngular"; revision: 3; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisRadial"; revision: 3; type: "QAbstractAxis"; isPointer: true }
        Property { name: "width"; revision: 1; type: "double" }
        Property { name: "style"; revision: 1; type: "Qt::PenStyle" }
        Property { name: "capStyle"; revision: 1; type: "Qt::PenCapStyle" }
        Property { name: "declarativeChildren"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "countChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisAngularChanged"
            revision: 3
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisRadialChanged"
            revision: 3
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "widthChanged"
            revision: 1
            Parameter { name: "width"; type: "double" }
        }
        Signal {
            name: "styleChanged"
            revision: 1
            Parameter { name: "style"; type: "Qt::PenStyle" }
        }
        Signal {
            name: "capStyleChanged"
            revision: 1
            Parameter { name: "capStyle"; type: "Qt::PenCapStyle" }
        }
        Method {
            name: "appendDeclarativeChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "handleCountChanged"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "replace"
            Parameter { name: "oldX"; type: "double" }
            Parameter { name: "oldY"; type: "double" }
            Parameter { name: "newX"; type: "double" }
            Parameter { name: "newY"; type: "double" }
        }
        Method {
            name: "replace"
            revision: 3
            Parameter { name: "index"; type: "int" }
            Parameter { name: "newX"; type: "double" }
            Parameter { name: "newY"; type: "double" }
        }
        Method {
            name: "remove"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "remove"
            revision: 3
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method { name: "clear" }
        Method {
            name: "at"
            type: "QPointF"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativeMargins"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/Margins 1.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "top"; type: "int" }
        Property { name: "bottom"; type: "int" }
        Property { name: "left"; type: "int" }
        Property { name: "right"; type: "int" }
        Signal {
            name: "topChanged"
            Parameter { name: "top"; type: "int" }
            Parameter { name: "bottom"; type: "int" }
            Parameter { name: "left"; type: "int" }
            Parameter { name: "right"; type: "int" }
        }
        Signal {
            name: "bottomChanged"
            Parameter { name: "top"; type: "int" }
            Parameter { name: "bottom"; type: "int" }
            Parameter { name: "left"; type: "int" }
            Parameter { name: "right"; type: "int" }
        }
        Signal {
            name: "leftChanged"
            Parameter { name: "top"; type: "int" }
            Parameter { name: "bottom"; type: "int" }
            Parameter { name: "left"; type: "int" }
            Parameter { name: "right"; type: "int" }
        }
        Signal {
            name: "rightChanged"
            Parameter { name: "top"; type: "int" }
            Parameter { name: "bottom"; type: "int" }
            Parameter { name: "left"; type: "int" }
            Parameter { name: "right"; type: "int" }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativePercentBarSeries"
        defaultProperty: "seriesChildren"
        prototype: "QtCommercialChart::QPercentBarSeries"
        exports: [
            "QtCommercial.Chart/PercentBarSeries 1.0",
            "QtCommercial.Chart/PercentBarSeries 1.1",
            "QtCommercial.Chart/PercentBarSeries 1.2"
        ]
        exportMetaObjectRevisions: [0, 1, 2]
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "seriesChildren"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Method {
            name: "appendSeriesChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "at"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            type: "DeclarativeBarSet*"
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "insert"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Method { name: "clear" }
    }
    Component {
        name: "QtCommercialChart::DeclarativePieSeries"
        defaultProperty: "seriesChildren"
        prototype: "QtCommercialChart::QPieSeries"
        exports: [
            "QtCommercial.Chart/PieSeries 1.0",
            "QtCommercial.Chart/PieSeries 1.1"
        ]
        exportMetaObjectRevisions: [0, 0]
        Property { name: "seriesChildren"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "sliceAdded"
            Parameter { name: "slice"; type: "QPieSlice"; isPointer: true }
        }
        Signal {
            name: "sliceRemoved"
            Parameter { name: "slice"; type: "QPieSlice"; isPointer: true }
        }
        Method {
            name: "appendSeriesChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "handleAdded"
            Parameter { name: "slices"; type: "QList<QPieSlice*>" }
        }
        Method {
            name: "handleRemoved"
            Parameter { name: "slices"; type: "QList<QPieSlice*>" }
        }
        Method {
            name: "at"
            type: "QPieSlice*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "find"
            type: "QPieSlice*"
            Parameter { name: "label"; type: "string" }
        }
        Method {
            name: "append"
            type: "DeclarativePieSlice*"
            Parameter { name: "label"; type: "string" }
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "slice"; type: "QPieSlice"; isPointer: true }
        }
        Method { name: "clear" }
    }
    Component {
        name: "QtCommercialChart::DeclarativePieSlice"
        prototype: "QtCommercialChart::QPieSlice"
        exports: ["QtCommercial.Chart/PieSlice 1.4"]
        exportMetaObjectRevisions: [0]
        Property { name: "brushFilename"; type: "string" }
        Signal {
            name: "brushFilenameChanged"
            Parameter { name: "brushFilename"; type: "string" }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativePolarChart"
        defaultProperty: "data"
        prototype: "QtCommercialChart::DeclarativeChart"
        exports: ["QtCommercial.Chart/PolarChartView 1.3"]
        exportMetaObjectRevisions: [1]
    }
    Component {
        name: "QtCommercialChart::DeclarativeScatterSeries"
        defaultProperty: "declarativeChildren"
        prototype: "QtCommercialChart::QScatterSeries"
        exports: [
            "QtCommercial.Chart/ScatterSeries 1.0",
            "QtCommercial.Chart/ScatterSeries 1.1",
            "QtCommercial.Chart/ScatterSeries 1.2",
            "QtCommercial.Chart/ScatterSeries 1.3",
            "QtCommercial.Chart/ScatterSeries 1.4"
        ]
        exportMetaObjectRevisions: [0, 1, 2, 3, 4]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisAngular"; revision: 3; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisRadial"; revision: 3; type: "QAbstractAxis"; isPointer: true }
        Property { name: "borderWidth"; revision: 1; type: "double" }
        Property { name: "declarativeChildren"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "brushFilename"; revision: 4; type: "string" }
        Property { name: "brush"; revision: 4; type: "QBrush" }
        Signal {
            name: "countChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "borderWidthChanged"
            revision: 1
            Parameter { name: "width"; type: "double" }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisAngularChanged"
            revision: 3
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisRadialChanged"
            revision: 3
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "brushFilenameChanged"
            revision: 4
            Parameter { name: "brushFilename"; type: "string" }
        }
        Signal { name: "brushChanged"; revision: 4 }
        Method {
            name: "appendDeclarativeChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "handleCountChanged"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "replace"
            Parameter { name: "oldX"; type: "double" }
            Parameter { name: "oldY"; type: "double" }
            Parameter { name: "newX"; type: "double" }
            Parameter { name: "newY"; type: "double" }
        }
        Method {
            name: "replace"
            revision: 3
            Parameter { name: "index"; type: "int" }
            Parameter { name: "newX"; type: "double" }
            Parameter { name: "newY"; type: "double" }
        }
        Method {
            name: "remove"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "remove"
            revision: 3
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method { name: "clear" }
        Method {
            name: "at"
            type: "QPointF"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativeSplineSeries"
        defaultProperty: "declarativeChildren"
        prototype: "QtCommercialChart::QSplineSeries"
        exports: [
            "QtCommercial.Chart/SplineSeries 1.0",
            "QtCommercial.Chart/SplineSeries 1.1",
            "QtCommercial.Chart/SplineSeries 1.2",
            "QtCommercial.Chart/SplineSeries 1.3"
        ]
        exportMetaObjectRevisions: [0, 1, 2, 3]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisAngular"; revision: 3; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisRadial"; revision: 3; type: "QAbstractAxis"; isPointer: true }
        Property { name: "width"; revision: 1; type: "double" }
        Property { name: "style"; revision: 1; type: "Qt::PenStyle" }
        Property { name: "capStyle"; revision: 1; type: "Qt::PenCapStyle" }
        Property { name: "declarativeChildren"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "countChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisAngularChanged"
            revision: 3
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisRadialChanged"
            revision: 3
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "widthChanged"
            revision: 1
            Parameter { name: "width"; type: "double" }
        }
        Signal {
            name: "styleChanged"
            revision: 1
            Parameter { name: "style"; type: "Qt::PenStyle" }
        }
        Signal {
            name: "capStyleChanged"
            revision: 1
            Parameter { name: "capStyle"; type: "Qt::PenCapStyle" }
        }
        Method {
            name: "appendDeclarativeChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "handleCountChanged"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "replace"
            Parameter { name: "oldX"; type: "double" }
            Parameter { name: "oldY"; type: "double" }
            Parameter { name: "newX"; type: "double" }
            Parameter { name: "newY"; type: "double" }
        }
        Method {
            name: "replace"
            revision: 3
            Parameter { name: "index"; type: "int" }
            Parameter { name: "newX"; type: "double" }
            Parameter { name: "newY"; type: "double" }
        }
        Method {
            name: "remove"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "remove"
            revision: 3
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method { name: "clear" }
        Method {
            name: "at"
            type: "QPointF"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "QtCommercialChart::DeclarativeStackedBarSeries"
        defaultProperty: "seriesChildren"
        prototype: "QtCommercialChart::QStackedBarSeries"
        exports: [
            "QtCommercial.Chart/StackedBarSeries 1.0",
            "QtCommercial.Chart/StackedBarSeries 1.1",
            "QtCommercial.Chart/StackedBarSeries 1.2"
        ]
        exportMetaObjectRevisions: [0, 1, 2]
        Property { name: "axisX"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisY"; revision: 1; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisXTop"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "axisYRight"; revision: 2; type: "QAbstractAxis"; isPointer: true }
        Property { name: "seriesChildren"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "axisXChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            revision: 1
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisXTopChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYRightChanged"
            revision: 2
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Method {
            name: "appendSeriesChildren"
            Parameter { name: "list"; type: "QObject"; isList: true; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "at"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "append"
            type: "DeclarativeBarSet*"
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "insert"
            type: "DeclarativeBarSet*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "label"; type: "string" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Method { name: "clear" }
    }
    Component {
        name: "QtCommercialChart::DeclarativeXYPoint"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/XYPoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
    }
    Component {
        name: "QtCommercialChart::LegendScroller"
        defaultProperty: "children"
        prototype: "QtCommercialChart::QLegend"
    }
    Component {
        name: "QtCommercialChart::QAbstractAxis"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/AbstractAxis 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "visible"; type: "bool" }
        Property { name: "lineVisible"; type: "bool" }
        Property { name: "linePen"; type: "QPen" }
        Property { name: "color"; type: "QColor" }
        Property { name: "labelsVisible"; type: "bool" }
        Property { name: "labelsPen"; type: "QPen" }
        Property { name: "labelsBrush"; type: "QBrush" }
        Property { name: "labelsAngle"; type: "int" }
        Property { name: "labelsFont"; type: "QFont" }
        Property { name: "labelsColor"; type: "QColor" }
        Property { name: "gridVisible"; type: "bool" }
        Property { name: "gridLinePen"; type: "QPen" }
        Property { name: "shadesVisible"; type: "bool" }
        Property { name: "shadesColor"; type: "QColor" }
        Property { name: "shadesBorderColor"; type: "QColor" }
        Property { name: "shadesPen"; type: "QPen" }
        Property { name: "shadesBrush"; type: "QBrush" }
        Property { name: "titleText"; type: "string" }
        Property { name: "titlePen"; type: "QPen" }
        Property { name: "titleBrush"; type: "QBrush" }
        Property { name: "titleVisible"; type: "bool" }
        Property { name: "titleFont"; type: "QFont" }
        Property { name: "orientation"; type: "Qt::Orientation"; isReadonly: true }
        Property { name: "alignment"; type: "Qt::Alignment"; isReadonly: true }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "linePenChanged"
            Parameter { name: "pen"; type: "QPen" }
        }
        Signal {
            name: "lineVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "labelsVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "labelsPenChanged"
            Parameter { name: "pen"; type: "QPen" }
        }
        Signal {
            name: "labelsBrushChanged"
            Parameter { name: "brush"; type: "QBrush" }
        }
        Signal {
            name: "labelsFontChanged"
            Parameter { name: "pen"; type: "QFont" }
        }
        Signal {
            name: "labelsAngleChanged"
            Parameter { name: "angle"; type: "int" }
        }
        Signal {
            name: "gridLinePenChanged"
            Parameter { name: "pen"; type: "QPen" }
        }
        Signal {
            name: "gridVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "labelsColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "titleTextChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "titlePenChanged"
            Parameter { name: "pen"; type: "QPen" }
        }
        Signal {
            name: "titleBrushChanged"
            Parameter { name: "brush"; type: "QBrush" }
        }
        Signal {
            name: "titleVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "titleFontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "shadesVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "shadesColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "shadesBorderColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "shadesPenChanged"
            Parameter { name: "pen"; type: "QPen" }
        }
        Signal {
            name: "shadesBrushChanged"
            Parameter { name: "brush"; type: "QBrush" }
        }
    }
    Component {
        name: "QtCommercialChart::QAbstractBarSeries"
        prototype: "QtCommercialChart::QAbstractSeries"
        exports: ["QtCommercial.Chart/AbstractBarSeries 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "barWidth"; type: "double" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "labelsVisible"; type: "bool" }
        Signal {
            name: "clicked"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Signal {
            name: "hovered"
            Parameter { name: "status"; type: "bool" }
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Signal {
            name: "hovered"
            Parameter { name: "status"; type: "bool" }
            Parameter { name: "index"; type: "int" }
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Signal {
            name: "barsetsAdded"
            Parameter { name: "sets"; type: "QList<QBarSet*>" }
        }
        Signal {
            name: "barsetsRemoved"
            Parameter { name: "sets"; type: "QList<QBarSet*>" }
        }
    }
    Component {
        name: "QtCommercialChart::QAbstractSeries"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/AbstractSeries 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SeriesType"
            values: {
                "SeriesTypeLine": 0,
                "SeriesTypeArea": 1,
                "SeriesTypeBar": 2,
                "SeriesTypeStackedBar": 3,
                "SeriesTypePercentBar": 4,
                "SeriesTypePie": 5,
                "SeriesTypeScatter": 6,
                "SeriesTypeSpline": 7,
                "SeriesTypeHorizontalBar": 8,
                "SeriesTypeHorizontalStackedBar": 9,
                "SeriesTypeHorizontalPercentBar": 10,
                "SeriesTypeBoxPlot": 11
            }
        }
        Property { name: "name"; type: "string" }
        Property { name: "visible"; type: "bool" }
        Property { name: "opacity"; type: "double" }
        Property { name: "type"; type: "SeriesType"; isReadonly: true }
    }
    Component {
        name: "QtCommercialChart::QAreaSeries"
        prototype: "QtCommercialChart::QAbstractSeries"
        Property { name: "upperSeries"; type: "QLineSeries"; isReadonly: true; isPointer: true }
        Property { name: "lowerSeries"; type: "QLineSeries"; isReadonly: true; isPointer: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "borderColor"; type: "QColor" }
        Signal {
            name: "clicked"
            Parameter { name: "point"; type: "QPointF" }
        }
        Signal {
            name: "hovered"
            Parameter { name: "point"; type: "QPointF" }
            Parameter { name: "state"; type: "bool" }
        }
        Signal { name: "selected" }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "borderColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
    }
    Component {
        name: "QtCommercialChart::QBarCategoryAxis"
        prototype: "QtCommercialChart::QAbstractAxis"
        exports: [
            "QtCommercial.Chart/BarCategoriesAxis 1.0",
            "QtCommercial.Chart/BarCategoryAxis 1.1"
        ]
        exportMetaObjectRevisions: [0, 0]
        Property { name: "categories"; type: "QStringList" }
        Property { name: "min"; type: "string" }
        Property { name: "max"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "minChanged"
            Parameter { name: "min"; type: "string" }
        }
        Signal {
            name: "maxChanged"
            Parameter { name: "max"; type: "string" }
        }
        Signal {
            name: "rangeChanged"
            Parameter { name: "min"; type: "string" }
            Parameter { name: "max"; type: "string" }
        }
    }
    Component {
        name: "QtCommercialChart::QBarModelMapper"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/BarModelMapper 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QtCommercialChart::QBarSeries"
        prototype: "QtCommercialChart::QAbstractBarSeries"
    }
    Component {
        name: "QtCommercialChart::QBarSet"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/BarSetBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "label"; type: "string" }
        Property { name: "pen"; type: "QPen" }
        Property { name: "brush"; type: "QBrush" }
        Property { name: "labelBrush"; type: "QBrush" }
        Property { name: "labelFont"; type: "QFont" }
        Property { name: "color"; type: "QColor" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "labelColor"; type: "QColor" }
        Signal {
            name: "clicked"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "hovered"
            Parameter { name: "status"; type: "bool" }
        }
        Signal {
            name: "hovered"
            Parameter { name: "status"; type: "bool" }
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "borderColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "labelColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "valuesAdded"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "valuesRemoved"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "QtCommercialChart::QBoxPlotSeries"
        prototype: "QtCommercialChart::QAbstractSeries"
        Property { name: "boxOutlineVisible"; type: "bool" }
        Property { name: "boxWidth"; type: "double" }
        Property { name: "pen"; type: "QPen" }
        Property { name: "brush"; type: "QBrush" }
        Signal {
            name: "clicked"
            Parameter { name: "boxset"; type: "QBoxSet"; isPointer: true }
        }
        Signal {
            name: "hovered"
            Parameter { name: "status"; type: "bool" }
            Parameter { name: "boxset"; type: "QBoxSet"; isPointer: true }
        }
        Signal { name: "countChanged" }
        Signal { name: "boxOutlineVisibilityChanged" }
        Signal {
            name: "boxsetsAdded"
            Parameter { name: "sets"; type: "QList<QBoxSet*>" }
        }
        Signal {
            name: "boxsetsRemoved"
            Parameter { name: "sets"; type: "QList<QBoxSet*>" }
        }
    }
    Component {
        name: "QtCommercialChart::QBoxSet"
        prototype: "QObject"
        Property { name: "pen"; type: "QPen" }
        Property { name: "brush"; type: "QBrush" }
        Signal { name: "clicked" }
        Signal {
            name: "hovered"
            Parameter { name: "status"; type: "bool" }
        }
        Signal { name: "valuesChanged" }
        Signal {
            name: "valueChanged"
            Parameter { name: "index"; type: "int" }
        }
        Signal { name: "cleared" }
    }
    Component {
        name: "QtCommercialChart::QCategoryAxis"
        prototype: "QtCommercialChart::QValueAxis"
        Property { name: "startValue"; type: "double" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "categoriesLabels"; type: "QStringList"; isReadonly: true }
        Signal { name: "categoriesChanged" }
    }
    Component {
        name: "QtCommercialChart::QDateTimeAxis"
        prototype: "QtCommercialChart::QAbstractAxis"
        exports: ["QtCommercial.Chart/DateTimeAxis 1.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "tickCount"; type: "int" }
        Property { name: "min"; type: "QDateTime" }
        Property { name: "max"; type: "QDateTime" }
        Property { name: "format"; type: "string" }
        Signal {
            name: "minChanged"
            Parameter { name: "min"; type: "QDateTime" }
        }
        Signal {
            name: "maxChanged"
            Parameter { name: "max"; type: "QDateTime" }
        }
        Signal {
            name: "rangeChanged"
            Parameter { name: "min"; type: "QDateTime" }
            Parameter { name: "max"; type: "QDateTime" }
        }
        Signal {
            name: "formatChanged"
            Parameter { name: "format"; type: "string" }
        }
        Signal {
            name: "tickCountChanged"
            Parameter { name: "tick"; type: "int" }
        }
    }
    Component {
        name: "QtCommercialChart::QHBarModelMapper"
        prototype: "QtCommercialChart::QBarModelMapper"
        exports: ["QtCommercial.Chart/HBarModelMapper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "series"; type: "QAbstractBarSeries"; isPointer: true }
        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "firstBarSetRow"; type: "int" }
        Property { name: "lastBarSetRow"; type: "int" }
        Property { name: "firstColumn"; type: "int" }
        Property { name: "columnCount"; type: "int" }
        Signal { name: "seriesReplaced" }
        Signal { name: "modelReplaced" }
    }
    Component {
        name: "QtCommercialChart::QHPieModelMapper"
        prototype: "QtCommercialChart::QPieModelMapper"
        exports: ["QtCommercial.Chart/HPieModelMapper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "series"; type: "QPieSeries"; isPointer: true }
        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "valuesRow"; type: "int" }
        Property { name: "labelsRow"; type: "int" }
        Property { name: "firstColumn"; type: "int" }
        Property { name: "columnCount"; type: "int" }
        Signal { name: "seriesReplaced" }
        Signal { name: "modelReplaced" }
    }
    Component {
        name: "QtCommercialChart::QHXYModelMapper"
        prototype: "QtCommercialChart::QXYModelMapper"
        exports: ["QtCommercial.Chart/HXYModelMapper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "series"; type: "QXYSeries"; isPointer: true }
        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "xRow"; type: "int" }
        Property { name: "yRow"; type: "int" }
        Property { name: "firstColumn"; type: "int" }
        Property { name: "columnCount"; type: "int" }
        Signal { name: "seriesReplaced" }
        Signal { name: "modelReplaced" }
    }
    Component {
        name: "QtCommercialChart::QHorizontalBarSeries"
        prototype: "QtCommercialChart::QAbstractBarSeries"
    }
    Component {
        name: "QtCommercialChart::QHorizontalPercentBarSeries"
        prototype: "QtCommercialChart::QAbstractBarSeries"
    }
    Component {
        name: "QtCommercialChart::QHorizontalStackedBarSeries"
        prototype: "QtCommercialChart::QAbstractBarSeries"
    }
    Component {
        name: "QtCommercialChart::QLegend"
        defaultProperty: "children"
        prototype: "QGraphicsWidget"
        exports: ["QtCommercial.Chart/Legend 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "alignment"; type: "Qt::Alignment" }
        Property { name: "backgroundVisible"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "font"; type: "QFont" }
        Property { name: "labelColor"; type: "QColor" }
        Property { name: "reverseMarkers"; type: "bool" }
        Signal {
            name: "backgroundVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "borderColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "labelColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "reverseMarkersChanged"
            Parameter { name: "reverseMarkers"; type: "bool" }
        }
    }
    Component { name: "QtCommercialChart::QLineSeries"; prototype: "QtCommercialChart::QXYSeries" }
    Component {
        name: "QtCommercialChart::QLogValueAxis"
        prototype: "QtCommercialChart::QAbstractAxis"
        exports: ["QtCommercial.Chart/LogValueAxis 1.3"]
        exportMetaObjectRevisions: [0]
        Property { name: "min"; type: "double" }
        Property { name: "max"; type: "double" }
        Property { name: "labelFormat"; type: "string" }
        Property { name: "base"; type: "double" }
        Signal {
            name: "minChanged"
            Parameter { name: "min"; type: "double" }
        }
        Signal {
            name: "maxChanged"
            Parameter { name: "max"; type: "double" }
        }
        Signal {
            name: "rangeChanged"
            Parameter { name: "min"; type: "double" }
            Parameter { name: "max"; type: "double" }
        }
        Signal {
            name: "labelFormatChanged"
            Parameter { name: "format"; type: "string" }
        }
        Signal {
            name: "baseChanged"
            Parameter { name: "base"; type: "double" }
        }
    }
    Component {
        name: "QtCommercialChart::QPercentBarSeries"
        prototype: "QtCommercialChart::QAbstractBarSeries"
    }
    Component {
        name: "QtCommercialChart::QPieModelMapper"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/PieModelMapper 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QtCommercialChart::QPieSeries"
        prototype: "QtCommercialChart::QAbstractSeries"
        exports: ["QtCommercial.Chart/QPieSeries 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "horizontalPosition"; type: "double" }
        Property { name: "verticalPosition"; type: "double" }
        Property { name: "size"; type: "double" }
        Property { name: "startAngle"; type: "double" }
        Property { name: "endAngle"; type: "double" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "sum"; type: "double"; isReadonly: true }
        Property { name: "holeSize"; type: "double" }
        Signal {
            name: "added"
            Parameter { name: "slices"; type: "QList<QPieSlice*>" }
        }
        Signal {
            name: "removed"
            Parameter { name: "slices"; type: "QList<QPieSlice*>" }
        }
        Signal {
            name: "clicked"
            Parameter { name: "slice"; type: "QPieSlice"; isPointer: true }
        }
        Signal {
            name: "hovered"
            Parameter { name: "slice"; type: "QPieSlice"; isPointer: true }
            Parameter { name: "state"; type: "bool" }
        }
    }
    Component {
        name: "QtCommercialChart::QPieSlice"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/PieSlice 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "LabelPosition"
            values: {
                "LabelOutside": 0,
                "LabelInsideHorizontal": 1,
                "LabelInsideTangential": 2,
                "LabelInsideNormal": 3
            }
        }
        Property { name: "label"; type: "string" }
        Property { name: "value"; type: "double" }
        Property { name: "labelVisible"; type: "bool" }
        Property { name: "labelPosition"; type: "LabelPosition" }
        Property { name: "exploded"; type: "bool" }
        Property { name: "pen"; type: "QPen" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "brush"; type: "QBrush" }
        Property { name: "color"; type: "QColor" }
        Property { name: "labelBrush"; type: "QBrush" }
        Property { name: "labelColor"; type: "QColor" }
        Property { name: "labelFont"; type: "QFont" }
        Property { name: "labelArmLengthFactor"; type: "double" }
        Property { name: "explodeDistanceFactor"; type: "double" }
        Property { name: "percentage"; type: "double"; isReadonly: true }
        Property { name: "startAngle"; type: "double"; isReadonly: true }
        Property { name: "angleSpan"; type: "double"; isReadonly: true }
        Signal { name: "clicked" }
        Signal {
            name: "hovered"
            Parameter { name: "state"; type: "bool" }
        }
    }
    Component {
        name: "QtCommercialChart::QScatterSeries"
        prototype: "QtCommercialChart::QXYSeries"
        Enum {
            name: "MarkerShape"
            values: {
                "MarkerShapeCircle": 0,
                "MarkerShapeRectangle": 1
            }
        }
        Property { name: "color"; type: "QColor" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "markerShape"; type: "MarkerShape" }
        Property { name: "markerSize"; type: "double" }
        Property { name: "brush"; type: "QBrush" }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "borderColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
    }
    Component {
        name: "QtCommercialChart::QSplineSeries"
        prototype: "QtCommercialChart::QLineSeries"
    }
    Component {
        name: "QtCommercialChart::QStackedBarSeries"
        prototype: "QtCommercialChart::QAbstractBarSeries"
    }
    Component {
        name: "QtCommercialChart::QVBarModelMapper"
        prototype: "QtCommercialChart::QBarModelMapper"
        exports: ["QtCommercial.Chart/VBarModelMapper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "series"; type: "QAbstractBarSeries"; isPointer: true }
        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "firstBarSetColumn"; type: "int" }
        Property { name: "lastBarSetColumn"; type: "int" }
        Property { name: "firstRow"; type: "int" }
        Property { name: "rowCount"; type: "int" }
        Signal { name: "seriesReplaced" }
        Signal { name: "modelReplaced" }
    }
    Component {
        name: "QtCommercialChart::QVPieModelMapper"
        prototype: "QtCommercialChart::QPieModelMapper"
        exports: ["QtCommercial.Chart/VPieModelMapper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "series"; type: "QPieSeries"; isPointer: true }
        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "valuesColumn"; type: "int" }
        Property { name: "labelsColumn"; type: "int" }
        Property { name: "firstRow"; type: "int" }
        Property { name: "rowCount"; type: "int" }
        Signal { name: "seriesReplaced" }
        Signal { name: "modelReplaced" }
    }
    Component {
        name: "QtCommercialChart::QVXYModelMapper"
        prototype: "QtCommercialChart::QXYModelMapper"
        exports: ["QtCommercial.Chart/VXYModelMapper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "series"; type: "QXYSeries"; isPointer: true }
        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "xColumn"; type: "int" }
        Property { name: "yColumn"; type: "int" }
        Property { name: "firstRow"; type: "int" }
        Property { name: "rowCount"; type: "int" }
        Signal { name: "seriesReplaced" }
        Signal { name: "modelReplaced" }
    }
    Component {
        name: "QtCommercialChart::QValueAxis"
        prototype: "QtCommercialChart::QAbstractAxis"
        exports: [
            "QtCommercial.Chart/ValueAxis 1.1",
            "QtCommercial.Chart/ValuesAxis 1.0"
        ]
        exportMetaObjectRevisions: [0, 0]
        Property { name: "tickCount"; type: "int" }
        Property { name: "niceNumbersEnabled"; type: "bool" }
        Property { name: "min"; type: "double" }
        Property { name: "max"; type: "double" }
        Property { name: "labelFormat"; type: "string" }
        Signal {
            name: "minChanged"
            Parameter { name: "min"; type: "double" }
        }
        Signal {
            name: "maxChanged"
            Parameter { name: "max"; type: "double" }
        }
        Signal {
            name: "rangeChanged"
            Parameter { name: "min"; type: "double" }
            Parameter { name: "max"; type: "double" }
        }
        Signal {
            name: "tickCountChanged"
            Parameter { name: "tickCount"; type: "int" }
        }
        Signal {
            name: "labelFormatChanged"
            Parameter { name: "format"; type: "string" }
        }
        Method { name: "applyNiceNumbers" }
    }
    Component {
        name: "QtCommercialChart::QXYModelMapper"
        prototype: "QObject"
        exports: ["QtCommercial.Chart/XYModelMapper 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QtCommercialChart::QXYSeries"
        prototype: "QtCommercialChart::QAbstractSeries"
        exports: ["QtCommercial.Chart/XYSeries 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pointsVisible"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Signal {
            name: "clicked"
            Parameter { name: "point"; type: "QPointF" }
        }
        Signal {
            name: "hovered"
            Parameter { name: "point"; type: "QPointF" }
            Parameter { name: "state"; type: "bool" }
        }
        Signal {
            name: "pointReplaced"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "pointRemoved"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "pointAdded"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal { name: "pointsReplaced" }
    }
}
